predict <- rep(0, nrow(joball))
predict[probs > 0.5] <- 1
print(table(prediction = predict, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(predict == joball.score$scoreclass))
}
eval(joball.lr)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
predict <- rep(0, nrow(joball))
predict[probs > 0.5] <- 1
print(table(prediction = predict, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(predict == joball.score$scoreclass))
}
eval(joball.lr)
joball <- rbind(job, jobval)
scoreclass <- as.numeric(joball$Y >= median(joball$Y))
joball.score <- cbind(joball, scoreclass)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
predict <- rep(0, nrow(joball))
predict[probs > 0.5] <- 1
print(table(prediction = predict, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(predict == joball.score$scoreclass))
}
eval(joball.lr)
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(1:nrow(joball.score), 20)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(3)
eval(joball.lr, get_subset())
set.seed(4)
eval(joball.lr, get_subset())
joball <- rbind(job, jobval)
scoreclass <- as.numeric(joball$Y >= median(joball$Y))
joball.score <- cbind(joball, scoreclass)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
predict <- rep(0, nrow(joball))
predict[probs > 0.5] <- 1
print(table(prediction = predict, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(predict == joball.score$scoreclass))
}
eval(joball.lr)
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(1:nrow(joball.score), 20)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(3)
eval(joball.lr, get_subset())
set.seed(4)
eval(joball.lr, get_subset())
?sample
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(1:nrow(joball.score), 20, replace = T)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(3)
eval(joball.lr, get_subset())
set.seed(4)
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(1:nrow(joball.score), 20)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(3)
eval(joball.lr, get_subset())
set.seed(4)
eval(joball.lr, get_subset())
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(joball))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(1:nrow(joball.score), 20)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(1:nrow(joball.score), 20)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(4)
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
idx <- sample(nrow(joball.score), 20)
return(joball.score[idx, ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(3)
eval(joball.lr, get_subset())
set.seed(4)
eval(joball.lr, get_subset())
?predict.glm
View(joball.score)
View(joball.score)
get_subset()
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset()[c(1, 3)])
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, joball.score[sample(nrow(joball.score), 20), ]
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, joball.score[sample(nrow(joball.score), 20), ])
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, joball.score[sample(nrow(joball.score), 20), ])
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
joball.lr <- glm(scoreclass ~ X1 + X3, data = joball.score, family = binomial)
summary(joball.lr)
?sample.int
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample.int(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
View(joball.score)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(joball))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
print(pred == joball.score$scoreclass)
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
?predict.glm
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
print(probs)
pred <- rep(0, nrow(joball))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
print(pred == joball.score$scoreclass)
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
eval <- function(model, data = NULL, datalen = nrow(joball)) {
probs <- predict(model, newdata = data, type = 'response')
print(probs)
pred <- rep(0, nrow(datalen))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
print(pred == joball.score$scoreclass)
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
eval <- function(model, data = NULL, datalen = nrow(joball.score)) {
probs <- predict(model, newdata = data, type = 'response')
print(probs)
pred <- rep(0, nrow(datalen))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
print(pred == joball.score$scoreclass)
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
print(probs)
pred <- rep(0, nrow(joball.score))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
print(pred == joball.score$scoreclass)
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
eval <- function(model, data = NULL, datalen = nrow(joball.score)) {
probs <- predict(model, newdata = data, type = 'response')
print(probs)
pred <- rep(0, datalen)
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
print(pred == joball.score$scoreclass)
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
# Create subset of Joball that contains 20 random applicants
set.seed(1)
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset(), datalen = 20)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(joball,score))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
eval <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(joball.score))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = joball.score$scoreclass))
cat('Error: ', 1 - mean(pred == joball.score$scoreclass))
}
eval(joball.lr)
get_subset()
# Create subset of Joball that contains 20 random applicants
set.seed(1)
eval.subset <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(data))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = data$scoreclass))
cat('Error: ', 1 - mean(pred == data$scoreclass))
}
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
eval.subset <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(data))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = data$scoreclass))
cat('Error: ', 1 - mean(pred == data$scoreclass))
}
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval.subset(joball.lr, get_subset())
set.seed(2)
eval(joball.lr, get_subset())
set.seed(2)
eval.subset(joball.lr, get_subset())
set.seed(3)
eval.subset(joball.lr, get_subset())
set.seed(4)
eval.subset(joball.lr, get_subset())
set.seed(42)
eval.subset(joball.lr, get_subset())
set.seed(8)
eval.subset(joball.lr, get_subset())
set.seed(16)
eval.subset(joball.lr, get_subset())
set.seed(39)
eval.subset(joball.lr, get_subset())
set.seed(2)
eval.subset(joball.lr, get_subset())
# Create subset of Joball that contains 20 random applicants
set.seed(1)
eval.subset <- function(model, data = NULL) {
probs <- predict(model, newdata = data, type = 'response')
pred <- rep(0, nrow(data))
pred[probs > 0.5] <- 1
print(table(prediction = pred, true = data$scoreclass))
cat('Error: ', 1 - mean(pred == data$scoreclass))
}
get_subset <- function() {
return(joball.score[sample(nrow(joball.score), 20), ])
}
eval.subset(joball.lr, get_subset())
View(joball.score)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
# library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(devtools)
devtools::install_github('plevritis/CELESTA', auth_token = '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')
# library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(Rmixmod)
library(spdep)
library(ggplot2)
library(reshape2)
library(zeallot)
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
load(file = 'data/prior_marker_info.rda')
load(file = 'data/imaging_data.rda')
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
celesta_obj <- CreateCelestaObject(project_title = "project_title", prior_marker_info, imaging_data)
library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(Rmixmod)
library(spdep)
library(ggplot2)
library(reshape2)
library(zeallot)
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
celesta_obj <- CreateCelestaObject(project_title = "project_title", prior_marker_info, imaging_data)
load_all()
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
load(file = 'data/prior_marker_info.rda')
load(file = 'data/imaging_data.rda')
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
load(file = 'data/prior_marker_info.rda')
load(file = 'data/imaging_data.rda')
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
celesta_obj <- CreateCelestaObject(project_title = "project_title", prior_marker_info, imaging_data)
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
celesta_obj <- CreateCelestaObject(project_title = "project_title", prior_marker_info, imaging_data)
library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(Rmixmod)
library(spdep)
library(ggplot2)
library(reshape2)
library(zeallot)
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
load(file = 'data/prior_marker_info.rda')
load(file = 'data/imaging_data.rda')
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
celesta_obj <- CreateCelestaObject(project_title = "project_title", prior_marker_info, imaging_data)
styler:::style_selection()
library(devtools)
devtools::install_github('plevritis/CELESTA', auth_token = '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')
library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(Rmixmod)
library(spdep)
library(ggplot2)
library(reshape2)
library(zeallot)
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
load(file = 'data/prior_marker_info.rda')
load(file = 'data/imaging_data.rda')
source('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA_functions_new.R')
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
celesta_obj <- CreateCelestaObject(project_title = "project_title", prior_marker_info, imaging_data)
celesta_obj@initial_pri_matrix
celesta_obj@prior_info
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
CelestaObj <- CreateCELESTAobj(project_title = "project_title",prior_marker_info,imaging_data)
compareCelesta(celesta_obj, CelestaObj)
library(dplyr)
compareCelesta <- function(c1, c2) {
sapply(slotNames(c1), function(x) {
a <- slot(c1, x)
b <- slot(c2, x)
if (typeof(a) == 'double') {
all(a - b <= 0.01, na.rm = T)
} else {
identical(a, b)
}
}
)
}
compareCelesta(celesta_obj, CelestaObj)
load_all()
library(devtools)
devtools::install_github('plevritis/CELESTA', auth_token = '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')
library(CELESTA)
library(CELESTA, lib.loc='/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
library(Rmixmod)
library(spdep)
library(ggplot2)
library(reshape2)
library(zeallot)
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
load(file = 'data/prior_marker_info.rda')
load(file = 'data/imaging_data.rda')
compareCelesta(celesta_obj, CelestaObj)
### The pre-saved imaging data is taken from reg009 of the published CODEX data Schurch et al. Cell,2020
### Create Celesta object. It requires a title for the project. It also required the segmented input file and user-defined cell-type signature matrix.Please refer to the Inputs session below.
CelestaObj <- CreateCELESTAobj(project_title = "project_title",prior_marker_info,imaging_data)
compareCelesta(celesta_obj, CelestaObj)
compareCelesta(celesta_obj, CelestaObj)
shiny::runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
?tagList
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
styler:::style_selection()
styler:::style_selection()
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
shiny::runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
shiny::runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
styler:::style_selection()
runApp('Desktop/Stanford/Classes/PlevritisRA/celesta-app')
styler:::style_selection()
roxygen2::roxygenise()
setwd('/Users/tassicalim/Desktop/Stanford/Classes/PlevritisRA/CELESTA')
roxygen2::roxygenise()
?GetFinalInferredCellTypes
runApp('~/Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('~/Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('~/Desktop/Stanford/Classes/PlevritisRA/celesta-app')
runApp('~/Desktop/Stanford/Classes/PlevritisRA/celesta-app')
?GetFinalInferredCellTypes
roxygen2::roxygenise()
runApp('~/Desktop/Stanford/Classes/PlevritisRA/celesta-app')
styler:::style_selection()
runApp('~/Desktop/Stanford/Classes/PlevritisRA/celesta-app')
